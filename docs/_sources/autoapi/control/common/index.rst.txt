:py:mod:`control.common`
========================

.. py:module:: control.common

.. autoapi-nested-parse::

   This module contains common control functions and classes.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   control.common.PWM
   control.common.SpeedCtrl
   control.common.RateLimiter
   control.common.Datalogger



Functions
~~~~~~~~~

.. autoapisummary::

   control.common.duty_ratios



.. py:function:: duty_ratios(u, u_dc)

   
   Compute the duty ratios for three-phase PWM.

   This compuates the duty ratios for three-phase PWM using a symmetrical
   suboscillation method. This method is identical to the standard
   space-vector PWM.

   :param u: Voltage space vector (typically reference value).
   :type u: complex
   :param u_dc: DC-bus voltage (typically measured value).
   :type u_dc: float

   :returns: **d_abc** -- Duty ratios (typically reference values).
   :rtype: ndarray, shape (3,)















   ..
       !! processed by numpydoc !!

.. py:class:: PWM(pars)

   Compute the duty ratio references and the realized voltage.

   This contains the compuation of the duty ratio references and the realized
   voltage. The compuation of the realized voltage takes the digital delay
   effects into account.



   :param pars: Controller parameters.
   :type pars: data object
















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(self, u_ref, u_dc, theta, w)

      
      Compute the duty ratio references and update the state.

      :param u_ref: Voltage reference in synchronous coordinates.
      :type u_ref: complex
      :param u_dc: DC-bus voltage.
      :type u_dc: float
      :param theta: Angle of synchronous coordinates.
      :type theta: float
      :param w: Angular frequency of synchronous coordinates.
      :type w: float

      :returns: **d_abc_ref** -- Duty ratio references.
      :rtype: ndarray, shape (3,)















      ..
          !! processed by numpydoc !!

   .. py:method:: output(self, u_ref, u_dc, theta, w)

      
      Compute the duty ratio references and the limited voltage reference.
















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, u_ref_lim)

      
      Update the voltage estimate for the next sampling instant.

      :param u_ref_lim: Limited voltage reference in synchronous coordinates.
      :type u_ref_lim: complex















      ..
          !! processed by numpydoc !!


.. py:class:: SpeedCtrl(pars)

   2DOF PI speed controller.

   This speed controller is implemented using the disturbance-observer
   structure. The controller is mathematically identical to the 2DOF PI speed
   controller.



   :param pars: Controller parameters.
   :type pars: data object
















   ..
       !! processed by numpydoc !!

   .. py:method:: output(self, w_M_ref, w_M)

      
      Compute the torque reference and the load torque estimate.

      :param w_M_ref: Rotor speed reference (in mechanical rad/s).
      :type w_M_ref: float
      :param w_M: Rotor speed (in mechanical rad/s).
      :type w_M: float

      :returns: * **tau_M_ref** (*float*) -- Torque reference.
                * **tau_L** (*float*) -- Load torque estimate.















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, tau_M, tau_L)

      
      Update the integral state.

      :param tau_M: Realized (limited) torque reference.
      :type tau_M: float
      :param tau_L: Load torque estimate.
      :type tau_L: float















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!


.. py:class:: RateLimiter(pars)

   Rate limiter.



   :param pars: Controller parameters.
   :type pars: data object
















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(self, u)

      
      :param u: Input signal.
      :type u: float

      :returns: **y** -- Rate-limited output signal.
      :rtype: float

      .. rubric:: Notes

      In this implementation, the falling rate limit equals the (negative)
      rising rate limit. If needed, these limits can be separated with minor
      modifications in the class.















      ..
          !! processed by numpydoc !!


.. py:class:: Datalogger

   Datalogger for the control system.



















   ..
       !! processed by numpydoc !!

   .. py:method:: save(self, data)

      
      Save the solution.

      :param data: Data to be saved.
      :type data: dictionary or Bunch object















      ..
          !! processed by numpydoc !!

   .. py:method:: post_process(self)

      
      Transform the lists to the ndarray format.
















      ..
          !! processed by numpydoc !!



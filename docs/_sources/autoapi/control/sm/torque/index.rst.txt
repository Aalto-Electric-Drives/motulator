:py:mod:`control.sm.torque`
===========================

.. py:module:: control.sm.torque

.. autoapi-nested-parse::

   This file contains computation and plotting of torque characteristics for
   synchronous machines, including the MTPA and MTPV loci. The methods can be used
   to define look-up tables for control as well as to analyze the characteristics.
   In this version, the magnetic saturation is omitted.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   control.sm.torque.TorqueCharacteristics




.. py:class:: TorqueCharacteristics(pars)

   Computes MTPA and MTPV loci based on the motor parameters. The magnetic
   saturation is omitted.


   :param pars: Motor parameters.
   :type pars: data object

   .. py:method:: torque(self, psi_s)

      Compute the torque as a function of the stator flux linkage.

      :param psi_s: Stator flux.
      :type psi_s: complex

      :returns: **tau_M** -- Electromagnetic torque.
      :rtype: float


   .. py:method:: current(self, psi_s)

      Compute the stator current as a function of the stator flux linkage.

      :param psi_s: Stator flux linkage.
      :type psi_s: complex

      :returns: **i_s** -- Stator current.
      :rtype: complex


   .. py:method:: flux(self, i_s)

      Compute the stator flux linkage as a function of the current.

      :param i_s: Stator current.
      :type i_s: complex

      :returns: **psi_s** -- Stator flux linkage.
      :rtype: complex


   .. py:method:: mtpa(self, abs_i_s)

      Compute the MTPA stator current angle.

      :param abs_i_s: Stator current magnitude.
      :type abs_i_s: float

      :returns: **beta** -- MTPA angle of the stator current vector.
      :rtype: float


   .. py:method:: mtpv(self, abs_psi_s)

      Compute the MTPV stator flux angle.

      :param abs_psi_s: Stator flux magnitude.
      :type abs_psi_s: float

      :returns: **delta** -- MTPV angle of the stator flux vector.
      :rtype: float


   .. py:method:: mtpv_current(self, abs_i_s)

      Compute the MTPV based on the current magnitude, i.e., the intersection
      of the MTPV current locus and the current limit circle. This method is
      not necessary for computing the control look-up tables. It is used here
      to "cut" the MTPV characteristics at the desired current. Alternatively
      just a large enough maximum flux magnitude could be used.

      :param abs_i_s: Stator current magnitude.
      :type abs_i_s: float

      :returns: **i_s** -- MTPV stator current.
      :rtype: complex


   .. py:method:: mtpa_locus(self, i_s_max=1, N=20)

      Compute the MTPA locus.

      :param i_s_max: Maximum stator current magnitude at which the locus is computed.
                      The default is 1.
      :type i_s_max: float, optional
      :param N: Amount of points. The default is 20.
      :type N: int, optional

      :returns: * *Bunch object with the following fields defined*
                * **psi_s** (*complex*) -- Stator flux.
                * **i_s** (*complex*) -- Stator current.
                * **tau_m** (*float*) -- Electromagnetic torque.
                * **abs_psi_s_vs_tau_M** (*interp1d object*) -- Stator flux magnitude as a function of the torque.
                * **i_sd_vs_tau_M** (*interp1d object*) -- d-axis current as a function of the torque.


   .. py:method:: mtpv_locus(self, psi_s_max=1, i_s_max=None, N=20)

      Compute the MTPV locus.

      :param psi_s_max: Maximum stator flux magnitude at which the locus is computed. The
                        default is 1.
      :type psi_s_max: float, optional
      :param i_s_max: Maximum stator current magnitude at which the locus is computed.
                      The default is None.
      :type i_s_max: float, optional
      :param N: Amount of points. The default is 20.
      :type N: int, optional

      :returns: * *Bunch object with the following fields defined*
                * **psi_s** (*complex*) -- Stator flux.
                * **i_s** (*complex*) -- Stator current.
                * **tau_m** (*float*) -- Electromagnetic torque.
                * **tau_M_vs_abs_psi_s** (*interp1d object*) -- Torque as a function of the flux magnitude.


   .. py:method:: current_limit(self, i_s_max=1, gamma1=np.pi, gamma2=0, N=20)

      Compute the current limit.

      :param i_s_max: Current limit. The default is 1.
      :type i_s_max: float, optional
      :param gamma1: Starting angle in radians. The default is 0.
      :type gamma1: float, optional
      :param gamm21: End angle in radians. The defauls in np.pi.
      :type gamm21: float, optional
      :param N: Amount of points. The default is 20.
      :type N: int, optional

      :returns: * *Bunch object with the following fields defined*
                * **psi_s** (*complex*) -- Stator flux.
                * **i_s** (*complex*) -- Stator current.
                * **tau_m** (*float*) -- Electromagnetic torque.
                * **tau_M_vs_abs_psi_s** (*interp1d object*) -- Torque as a function of the flux magnitude.


   .. py:method:: mtpv_and_current_limits(self, i_s_max=1, N=20)

      Merge the MTPV and current limits into a single interpolant.

      :param i_s_max: Current limit. The default is 1.
      :type i_s_max: float, optional
      :param N: Amount of points. The default is 20.
      :type N: int, optional

      :returns: * *Bunch object with the following fields defined*
                * **tau_M_vs_abs_psi_s** (*interp1d object*) -- Torque as a function of the flux magnitude.
                * **i_sd_vs_tau_M** (*interp1d object*) -- d-axis current as a function of the torque.


   .. py:method:: delta_at_zero_torque(self, abs_psi_s)

      Compute the "nontrivial" load angle value corresponding to the zero
      electromagnetic torque.

      :param abs_psi_s: Stator flux magnitude.
      :type abs_psi_s: float

      :returns: **delta** -- Load angle at the zero torque.
      :rtype: float


   .. py:method:: plot_flux_loci(self, i_s_max, base, N=20)

      Plot stator flux linkage loci using per-unit quantities.

      :param i_s_max: Maximum current at which the loci are evaluated.
      :type i_s_max: float
      :param base: Base values.
      :type base: object
      :param N: Amount of points to be evaluated. The default is 20.
      :type N: int, optional

      :returns:
      :rtype: None.


   .. py:method:: plot_current_loci(self, i_s_max, base, N=20)

      Plot current loci using per-unit quantities.

      :param i_s_max: Maximum current at which the loci are evaluated.
      :type i_s_max: float
      :param base: Base values.
      :type base: object
      :param N: Amount of points to be evaluated. The default is 20.
      :type N: int, optional

      :returns:
      :rtype: None.


   .. py:method:: plot_torque_current(self, i_s_max, base, N=20)

      Plot torque vs. current characteristics using per-unit quantities.

      :param i_s_max: Maximum current at which the loci are evaluated.
      :type i_s_max: float
      :param base: Base values.
      :type base: object
      :param N: Amount of points to be evaluated. The default is 20.
      :type N: int, optional

      :returns:
      :rtype: None.


   .. py:method:: plot_torque_flux(self, i_s_max, base, N=20)

      Plot torque vs. flux magnitude characteristics using per-unit
      quantities.

      :param i_s_max: Maximum current at which the loci are evaluated.
      :type i_s_max: float
      :param base: Base values.
      :type base: object
      :param N: Amount of points to be evaluated. The default is 20.
      :type N: int, optional

      :returns:
      :rtype: None.


   .. py:method:: plot_angle_torque(self, abs_psi_s, base, N=100)

      Plot the electromagnetic torque as a function of the load angle.

      :param abs_psi_s: Stator flux magnitude.
      :type abs_psi_s: float
      :param base: Base values.
      :type base: object
      :param N: Amount of points to be evaluated. The default is 100.
      :type N: int, optional

      :returns:
      :rtype: None.




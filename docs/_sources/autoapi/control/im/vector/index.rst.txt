:py:mod:`control.im.vector`
===========================

.. py:module:: control.im.vector

.. autoapi-nested-parse::

   This module contains vector control methods for an induction motor drive.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   control.im.vector.VectorCtrl
   control.im.vector.CurrentRef
   control.im.vector.CurrentCtrl
   control.im.vector.SensorlessObserver
   control.im.vector.CurrentModelEstimator




.. py:class:: VectorCtrl(pars, speed_ctrl, current_ref, current_ctrl, observer)

   Interconnect the subsystems of the control method.

   This class interconnects the subsystems of the control system and
   provides the interface to the solver.



















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(self, w_m_ref, i_s_abc, u_dc, *args)

      
      Main control loop.

      :param w_m_ref: Rotor speed reference (in electrical rad/s).
      :type w_m_ref: float
      :param i_s_abc: Phase currents.
      :type i_s_abc: ndarray, shape (3,)
      :param u_dc: DC-bus voltage.
      :type u_dc: float
      :param w_m: Rotor speed (in electrical rad/s), for the sensored control.
      :type w_m: float, optional

      :returns: * **d_abc_ref** (*ndarray, shape (3,)*) -- Duty ratio references.
                * **T_s** (*float*) -- Sampling period.















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!


.. py:class:: CurrentRef(pars)

   Current reference calculation.

   This current reference calculation method includes field-weakenting
   operation based on the unlimited voltage reference feedback. The breakdown
   torque and current limits are taken into account.

   .. rubric:: Notes

   The field-weakening method and its tuning corresponds roughly to [1]_.

   .. rubric:: References

   .. [1] Hinkkanen, Luomi, "Braking scheme for vector-controlled induction
      motor drives equipped with diode rectifier without braking resistor,"
      IEEE Trans. Ind. Appl., 2006, https://doi.org/10.1109/TIA.2006.880852

   :param pars: Controller parameters.
   :type pars: data object
















   ..
       !! processed by numpydoc !!

   .. py:method:: output(self, tau_M_ref, psi_R)

      
      Compute the stator current reference.

      :param tau_M_ref: Torque reference.
      :type tau_M_ref: float
      :param psi_R: Rotor flux magnitude.
      :type psi_R: float

      :returns: * **i_s_ref** (*complex*) -- Stator current reference.
                * **tau_M** (*float*) -- Limited torque reference.















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, u_s_ref, u_dc)

      
      Field-weakening based on the unlimited reference voltage.

      :param u_s_ref: Unlimited stator voltage reference.
      :type u_s_ref: complex
      :param u_dc: DC-bus voltage.
      :type u_dc: float.















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!


.. py:class:: CurrentCtrl(pars)

   2DOF PI current controller.

   This 2DOF PI current controller corresponds to [2]_. The continuous-time
   complex-vector design corresponding to (13) is used here. The rotor flux
   linkage is considered as a quasi-constant disturbance. This design could
   be equivalently presented as a 2DOF PI controller.

   .. rubric:: Notes

   This implementation does not take the magnetic saturation into account.

   .. rubric:: References

   .. [2] Awan, Saarakkala, Hinkkanen, "Flux-linkage-based current control of
      saturated synchronous motors," IEEE Trans. Ind. Appl. 2019,
      https://doi.org/10.1109/TIA.2019.2919258

   :param pars: Controller parameters.
   :type pars: data object
















   ..
       !! processed by numpydoc !!

   .. py:method:: output(self, i_s_ref, i_s)

      
      Compute the unlimited voltage reference.

      :param i_s_ref: Stator current reference.
      :type i_s_ref: complex
      :param i_s: Measured stator current.
      :type i_s: complex

      :returns: * **u_s_ref** (*complex*) -- Unlimited voltage reference.
                * **e** (*complex*) -- Error (scaled, corresponds to the leakage flux linkage).















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, e, u_s_ref, u_s_ref_lim, w_s)

      
      Update the integral state.

      :param e: Error (scaled, corresponds to the leakage flux linkage).
      :type e: complex
      :param u_s_ref: Unlimited voltage reference.
      :type u_s_ref: complex
      :param u_s_ref_lim: Limited voltage reference.
      :type u_s_ref_lim: complex
      :param w_s: Angular stator frequency.
      :type w_s: float















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!


.. py:class:: SensorlessObserver(pars)

   Sensorless reduced-order observer.

   This sensorless reduced-order flux observer corresponds to [3]_. The
   observer gain decouples the electrical and mechanical dynamics and allows
   placing the poles of the corresponding linearized estimation error
   dynamics. This implementation operates in estimated rotor flux coordinates.

   .. rubric:: Notes

   This implementation corresponds to (26)-(30) in [3]_ with the fixed
   selection c = w_s**2 in (17). The closed-loop poles, cf. (40), can still be
   affected via the choice of the coefficient b > 0.

   .. rubric:: References

   .. [3] Hinkkanen, Harnefors, Luomi, "Reduced-order flux observers with
      stator-resistance adaptation for speed-sensorless induction motor
      drives," IEEE Trans. Power Electron., 2010,
      https://doi.org/10.1109/TPEL.2009.2039650

   :param pars: Controller parameters.
   :type pars: data object
















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(self, u_s, i_s)

      
      Output and update the sensorless observer.

      :param u_s: Stator voltage in estimated rotor flux coordinates.
      :type u_s: complex
      :param i_s: Stator current in estimated rotor flux coordinates.
      :type i_s: complex

      :returns: **w_s** -- Angular frequency of the rotor flux.
      :rtype: float















      ..
          !! processed by numpydoc !!

   .. py:method:: output(self, u_s, i_s)

      
      Compute the outputs of the observer.
















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, i_s, w_s, w_r, dpsi_R)

      
      Update the states for the next sampling period.
















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!


.. py:class:: CurrentModelEstimator(pars)

   Current model flux estimator.

   This simple flux estimator requires speed measurement.



   :param pars: Controller parameters.
   :type pars: data object
















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(self, i_s, w_m)

      
      Output and update the observer.

      :param i_s: Stator current.
      :type i_s: complex
      :param w_m: Rotor speed (in electrical rad/s).
      :type w_m: float

      :returns: **w_s** -- Angular frequency of the rotor flux.
      :rtype: float















      ..
          !! processed by numpydoc !!

   .. py:method:: output(self, i_s, w_m)

      
      Compute the outputs of the observer.
















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, i_s, w_s)

      
      Update the states for the next sampling period.

      :param i_s: Stator current.
      :type i_s: complex
      :param w_s: Angular frequency of the rotor flux.
      :type w_s: float















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!



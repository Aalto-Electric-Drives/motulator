:py:mod:`control.im.vector`
===========================

.. py:module:: control.im.vector

.. autoapi-nested-parse::

   This module includes vector control methods for induction motor drives.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   control.im.vector.VectorCtrl
   control.im.vector.CurrentRef
   control.im.vector.CurrentCtrl
   control.im.vector.SensorlessObserver
   control.im.vector.CurrentModelEstimator




.. py:class:: VectorCtrl(pars, speed_ctrl, current_ref, current_ctrl, observer)

   This class interconnects the subsystems of an induction motor control
   system and provides the interface to the solver.


   Instantiate the classes.



.. py:class:: CurrentRef(pars)

   This class contains a method for current reference computation with
   field weakening based on the voltage reference. The field-weakening method
   and its tuning corresponds roughly to the paper "Braking scheme for
   vector-controlled induction motor drives equipped with diode rectifier
   without braking resistor":

       https://doi.org/10.1109/TIA.2006.880852


   :param pars: Controller parameters.
   :type pars: data object

   .. py:method:: output(self, tau_M_ref, psi_R)

      Compute the stator current reference.

      :param tau_M_ref: Torque reference.
      :type tau_M_ref: float
      :param psi_R: Rotor flux magnitude.
      :type psi_R: float

      :returns: * **i_s_ref** (*complex*) -- Stator current reference.
                * **tau_M** (*float*) -- Limited torque reference.


   .. py:method:: update(self, u_s_ref, u_dc)

      Field-weakening based on the unlimited reference voltage.

      :param u_s_ref: Unlimited stator voltage reference.
      :type u_s_ref: complex
      :param u_dc: DC-bus voltage.
      :type u_dc: float.



.. py:class:: CurrentCtrl(pars)

   A current controller corresponding to the paper "Flux-linkage-based current
   control of saturated synchronous motors":

       https://doi.org/10.1109/TIA.2019.291925

   The continuous-time complex-vector design corresponding to (13) is used
   here. This design could be equivalently presented as a 2DOF PI controller.
   For better performance at high speed with low sampling frequencies, the
   discrete-time design in (18) is recommended.


   :param pars: Controller parameters.
   :type pars: data object

   .. py:method:: output(self, i_s_ref, i_s)

      Compute the unlimited voltage reference.

      :param i_s_ref: Stator current reference.
      :type i_s_ref: complex
      :param i_s: Measured stator current.
      :type i_s: complex

      :returns: * **u_s_ref** (*complex*) -- Unlimited voltage reference.
                * **e** (*complex*) -- Error (scaled, corresponds to the leakage flux linkage).


   .. py:method:: update(self, e, u_s_ref, u_s_ref_lim, w_s)

      Update the integral state.

      :param e: Error (scaled, corresponds to the leakage flux linkage).
      :type e: complex
      :param u_s_ref: Unlimited voltage reference.
      :type u_s_ref: complex
      :param u_s_ref_lim: Limited voltage reference.
      :type u_s_ref_lim: complex
      :param w_s: Angular stator frequency.
      :type w_s: float



.. py:class:: SensorlessObserver(pars)

   Sensorless reduced-order observer corresponding to the paper
   "Reduced-order flux observers with stator-resistance adaptation for
   speed-sensorless induction motor drives":

       https://doi.org/10.1109/TPEL.2009.2039650

   This implementation corresponds to (26)-(30) with the fixed selection
   c = w_s**2 in (17). This selection allows to avoid the algebraic loop
   in (26b). The closed-loop poles, cf. (40), can still be affected via the
   choice of the coefficient b > 0.


   :param pars: Controller parameters.
   :type pars: data object

   .. py:method:: output(self, u_s, i_s)

      Compute the outputs of the observer.



   .. py:method:: update(self, i_s, w_s, w_r, dpsi_R)

      Update the states for the next sampling period.




.. py:class:: CurrentModelEstimator(pars)

   This class contains a simple sensored flux estimator, commonly known as
   the current model.


   :param pars: Controller parameters.
   :type pars: data object

   .. py:method:: output(self, i_s, w_m)

      Compute the outputs of the observer.



   .. py:method:: update(self, i_s, w_s)

      Update the states for the next sampling period.

      :param i_s: Stator current.
      :type i_s: complex
      :param w_s: Angular frequency of the rotor flux.
      :type w_s: float




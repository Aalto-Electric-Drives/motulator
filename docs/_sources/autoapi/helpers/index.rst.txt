:py:mod:`helpers`
=================

.. py:module:: helpers

.. autoapi-nested-parse::

   This module contains various helper functions and classes.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   helpers.Sequence
   helpers.Step



Functions
~~~~~~~~~

.. autoapisummary::

   helpers.abc2complex
   helpers.complex2abc
   helpers.ref_ramp
   helpers.ref_step
   helpers.plot
   helpers.plot_im_extra



.. py:function:: abc2complex(u)

   
   Transform three-phase quantities to a complex space vector.

   :param u: Phase quantities.
   :type u: array_like, shape (3,)

   :returns: Complex space vector (peak-value scaling).
   :rtype: complex

   .. rubric:: Examples

   >>> y = abc2complex([1, 2, 3])
   >>> y
   (-1-0.5773502691896258j)















   ..
       !! processed by numpydoc !!

.. py:function:: complex2abc(u)

   
   Transform a complex space vector to three-phase quantities.

   :param u: Complex space vector (peak-value scaling).
   :type u: complex

   :returns: Phase quantities.
   :rtype: ndarray, shape (3,)

   .. rubric:: Examples

   >>> y = complex2abc(1-.5j)
   >>> y
   array([ 1.       , -0.9330127, -0.0669873])















   ..
       !! processed by numpydoc !!

.. py:class:: Sequence(times, values, periodic=False)

   Sequence generator.

   This represents a sequence generator. The time array must be increasing.
   The output values are interpolated between the data points.



   :param times: Time values.
   :type times: ndarray
   :param values: Output values.
   :type values: ndarray
   :param periodic: Enables periodicity. The default is False.
   :type periodic: Boolean, optional
















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(self, t)

      
      Interpolate the output.

      :param t: Time.
      :type t: float

      :returns: Interpolated output.
      :rtype: float or complex















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!


.. py:class:: Step(step_time, step_value, initial_value=0)

   Step function.



















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(self, t)

      
      Step function.

      :param t: Time.
      :type t: float

      :returns: Step output.
      :rtype: float















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!


.. py:function:: ref_ramp(mdl, w_max=2 * np.pi * 50, tau_max=14.6, t_max=4)

   
   Generate a ramp reference.

   This generate an example ramp profile for the speed reference. The load
   torque changes stepwise.

   :param mdl: Drive model.
   :type mdl: object
   :param w_max: Maximum speed in the profile. The default is 2*pi*50.
   :type w_max: float, optional
   :param tau_max: Maximum load torque in the profile. The default is 14.6.
   :type tau_max: float, optional
   :param t_max: Length of the profile. The default is 4.
   :type t_max: float, optional















   ..
       !! processed by numpydoc !!

.. py:function:: ref_step(mdl, w_max=0.8 * 2 * np.pi * 50, tau_max=14.6, t_max=1.5)

   
   Generate a step reference.

   This generates an example stepwise profile for the speed reference and load
   torque.

   :param mdl: Drive model.
   :type mdl: object
   :param w_max: Maximum speed in the profile. The default is .8*2*pi*50.
   :type w_max: float, optional
   :param tau_max: Maximum load torque in the profile. The default is 14.6.
   :type tau_max: float, optional
   :param t_max: Length of the profile. The default is 1.5.
   :type t_max: float, optional















   ..
       !! processed by numpydoc !!

.. py:function:: plot(mdl, ctrl, base)

   
   Plot example figures.

   :param mdl: Continuous-time solution.
   :type mdl: object
   :param ctrl: Continuous-time solution.
   :type ctrl: object
   :param base: Base values.
   :type base: object















   ..
       !! processed by numpydoc !!

.. py:function:: plot_im_extra(mdl, ctrl, base)

   
   Plot extra waveforms for an induction motor with a diode bridge.

   :param mdl: Continuous-time solution.
   :type mdl: object
   :param ctrl: Continuous-time solution.
   :type ctrl: object
   :param base: Base values.
   :type base: object















   ..
       !! processed by numpydoc !!


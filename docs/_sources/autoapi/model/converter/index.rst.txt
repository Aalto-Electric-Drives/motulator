:py:mod:`model.converter`
=========================

.. py:module:: model.converter

.. autoapi-nested-parse::

   This module contains models for the power converter. The inverter with the
   constant DC-bus voltage and the frequency converter with the diode
   front-end rectifier are modeled.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   model.converter.Inverter
   model.converter.FrequencyConverter



Functions
~~~~~~~~~

.. autoapisummary::

   model.converter.ac_voltage
   model.converter.dc_current



.. py:function:: ac_voltage(q, u_dc)

   Computes the AC-side voltage of a lossless inverter.

   :param q: Switching state vector (in stator coordinates).
   :type q: complex
   :param u_dc: DC-Bus voltage.
   :type u_dc: float

   :returns: **u_ac** -- AC-side voltage.
   :rtype: complex


.. py:function:: dc_current(q, i_ac)

   Computes the DC-side current of a lossless inverter.

   :param q: Switching state vector (in stator coordinates).
   :type q: complex
   :param i_ac: AC-side current.
   :type i_ac: complex

   :returns: **i_dc** -- DC-side current.
   :rtype: float


.. py:class:: Inverter(u_dc=540)

   This class represents an inverter fed from the constant DC-voltage source.


   :param u_dc: DC-bus voltage. The default is 540.
   :type u_dc: float, optional

   .. py:method:: meas_dc_voltage(self)

      :returns: Measured DC-bus voltage.
      :rtype: float



.. py:class:: FrequencyConverter(C=0.000235, L=0.002, u_g=np.sqrt(2 / 3) * 400, w_g=2 * np.pi * 50)

   This class models a strong grid, a three-phase diode-bridge rectifier,
   an LC filter, and a three-phase inverter.


   :param C: DC-bus capacitance. The default is 235e-6.
   :type C: float, optional
   :param L: DC-bus inductance. The default is 2e-3.
   :type L: float, optional
   :param u_g: Grid voltage (line-neutral, peak). The default is sqrt(2/3)*400.
   :type u_g: float, optional
   :param w_g: Grid angular frequency. The default is 2*pi*50.
   :type w_g: float, optional

   .. py:method:: grid_voltages(self, t)

      Computes the three-phase grid voltages.

      :param t: Time.
      :type t: float

      :returns: **u_g_abc** -- The phase voltages.
      :rtype: ndarray of floats, shape (3,)


   .. py:method:: f(self, t, u_dc, i_L, i_dc)

      Computes the state derivatives.

      :param t: Time.
      :type t: float
      :param u_dc: DC-bus voltage over the capacitor.
      :type u_dc: float
      :param i_L: DC-bus inductor current.
      :type i_L: float
      :param i_dc: Current to the inverter.
      :type i_dc: float

      :returns: Time derivative of the state vector, [du_dc, d_iL]
      :rtype: list, length 2


   .. py:method:: meas_dc_voltage(self)

      :returns: Measured DC-bus voltage.
      :rtype: float




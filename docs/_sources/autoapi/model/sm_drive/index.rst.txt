:py:mod:`model.sm_drive`
========================

.. py:module:: model.sm_drive

.. autoapi-nested-parse::

   This module contains continuous-time models for synchronous motor drives.

   The same motor model can be parametrized to represent a permanent-magnet
   synchronous motor and synchronous reluctance motor. Peak-valued complex space
   vectors are used.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   model.sm_drive.Drive
   model.sm_drive.Motor
   model.sm_drive.Datalogger




.. py:class:: Drive(motor, mech, converter, delay, pwm, datalog)

   Interconnect the subsystems of an synchronous motor drive.

   This interconnects the subsystems of an synchronous motor drive and
   provides the interface to the solver. More complicated systems could be
   simulated using a similar template.



















   ..
       !! processed by numpydoc !!

   .. py:method:: get_initial_values(self)

      
      Get the initial values.

      :returns: **x0** -- Initial values of the state variables.
      :rtype: complex list, length 2















      ..
          !! processed by numpydoc !!

   .. py:method:: set_initial_values(self, t0, x0)

      
      Set the initial values.

      :param x0: Initial values of the state variables.
      :type x0: complex ndarray















      ..
          !! processed by numpydoc !!

   .. py:method:: f(self, t, x)

      
      Compute the complete state derivative list for the solver.

      :param t: Time.
      :type t: float
      :param x: State vector.
      :type x: complex ndarray

      :returns: State derivatives.
      :rtype: complex list















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!


.. py:class:: Motor(mech, R_s=3.6, L_d=0.036, L_q=0.051, psi_f=0.545, p=3)

   Synchronous motor.

   This models a synchronous motor. The model is implemented in rotor
   coordinates. The default values correspond to a 2.2-kW permanent-magnet
   synchronous motor.



   :param mech: Mechanics, needed for computing the measured phase currents.
   :type mech: object
   :param R_s: Stator resistance. The default is 3.6.
   :type R_s: float, optional
   :param L_d: d-axis inductance. The default is .036.
   :type L_d: float, optional
   :param L_q: q-axis inductance. The default is .051.
   :type L_q: float, optional
   :param psi_f: PM-flux linkage. The default is .545.
   :type psi_f: float, optional
   :param p: Number of pole pairs. The default is 3.
   :type p: int, optional
















   ..
       !! processed by numpydoc !!

   .. py:method:: current(self, psi_s)

      
      Compute the stator current.

      :param psi_s: Stator flux linkage.
      :type psi_s: complex

      :returns: **i_s** -- Stator current.
      :rtype: complex















      ..
          !! processed by numpydoc !!

   .. py:method:: torque(self, psi_s, i_s)

      
      Compute the electromagnetic torque.

      :param psi_s: Stator flux linkage.
      :type psi_s: complex
      :param i_s: Stator current.
      :type i_s: complex

      :returns: **tau_M** -- Electromagnetic torque.
      :rtype: float















      ..
          !! processed by numpydoc !!

   .. py:method:: f(self, psi_s, i_s, u_s, w_M)

      
      Compute the state derivative.

      :param psi_s: Stator flux linkage.
      :type psi_s: complex
      :param u_s: Stator voltage.
      :type u_s: complex
      :param w_M: Rotor angular speed (in mechanical rad/s).
      :type w_M: float

      :returns: **dpsi_s** -- Time derivative of the stator flux linkage.
      :rtype: complex















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_currents(self)

      
      Measure the phase currents at the end of the sampling period.

      :returns: **i_s_abc** -- Phase currents.
      :rtype: 3-tuple of floats















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!


.. py:class:: Datalogger

   Datalogger for a synchronous motor drive.



















   ..
       !! processed by numpydoc !!

   .. py:method:: save(self, sol)

      
      Save the solution.

      :param sol: Solution from the solver.
      :type sol: bunch object















      ..
          !! processed by numpydoc !!

   .. py:method:: post_process(self, mdl)

      
      Transform the lists to the ndarray format and post-process them.

      :param mdl: Drive object that includes the data.
      :type mdl: object















      ..
          !! processed by numpydoc !!



:py:mod:`model.im_drive`
========================

.. py:module:: model.im_drive

.. autoapi-nested-parse::

   This module includes a continuous-time model for an induction motor drive. The
   space vector models are implemented in stator coordinates.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   model.im_drive.Drive
   model.im_drive.Motor
   model.im_drive.SaturationModel
   model.im_drive.MotorSaturated
   model.im_drive.Datalogger
   model.im_drive.DriveWithDiodeBridge
   model.im_drive.DataloggerExtended




.. py:class:: Drive(motor, mech, converter, delay, pwm, datalog)

   This class interconnects the subsystems of an induction motor drive
   and provides the interface to the solver. More complicated systems
   could be simulated using a similar template.


   Instantiate the classes.


   .. py:method:: get_initial_values(self)

      :returns: **x0** -- Initial values of the state variables.
      :rtype: complex list, length 4


   .. py:method:: set_initial_values(self, t0, x0)

      :param x0: Initial values of the state variables.
      :type x0: complex ndarray


   .. py:method:: f(self, t, x)

      Compute the complete state derivative list for the solver.

      :param t: Time.
      :type t: float
      :param x: State vector.
      :type x: complex ndarray

      :returns: State derivatives.
      :rtype: complex list



.. py:class:: Motor(R_s=3.7, R_R=2.1, L_sgm=0.021, L_M=0.224, p=2)

   This class represents an induction motor. The inverse-Gamma model and
   peak-valued complex space vectors are used.


   The default values correspond to the 2.2-kW induction motor.

   :param R_s: Stator resistance. The default is 3.7.
   :type R_s: float, optional
   :param R_R: Rotor resistance. The default is 2.1.
   :type R_R: float, optional
   :param L_sgm: Leakage inductance. The default is .021.
   :type L_sgm: float, optional
   :param L_M: Magnetizing inductance. The default is .224.
   :type L_M: float, optional
   :param p: Number of pole pairs. The default is 2.
   :type p: int, optional

   .. py:method:: currents(self, psi_ss, psi_Rs)

      Computes the stator and rotor currents.

      :param psi_ss: Stator flux linkage in stator coordinates.
      :type psi_ss: complex
      :param psi_Rs: Rotor flux linkage in stator coordinates.
      :type psi_Rs: complex

      :returns: * **i_ss** (*complex*) -- Stator current in stator coordinates.
                * **i_Rs** (*complex*) -- Rotor current in stator coordinates.


   .. py:method:: torque(self, psi_ss, i_ss)

      Computes the electromagnetic torque.

      :param psi_ss: Stator flux linkage.
      :type psi_ss: complex
      :param i_ss: Stator current.
      :type i_ss: complex

      :returns: **tau_M** -- Electromagnetic torque.
      :rtype: float


   .. py:method:: f(self, psi_Rs, i_ss, i_Rs, u_ss, w_M)

      Computes the state derivatives. All space vectors are in stator
      coordinates.

      :param psi_ss: Stator flux linkage.
      :type psi_ss: complex
      :param psi_Rs: Rotor flux linkage.
      :type psi_Rs: complex
      :param i_ss: Stator current.
      :type i_ss: complex
      :param i_Rs: Rotor current.
      :type i_Rs: complex
      :param u_ss: Stator voltage.
      :type u_ss: complex
      :param w_M: Rotor speed (in mechanical rad/s).
      :type w_M: float

      :returns: Time derivative of the state vector, [dpsi_ss, dpsi_Rs]
      :rtype: complex list, length 2


   .. py:method:: meas_currents(self)

      Returns the phase currents at the end of the sampling period.

      :returns: **i_s_abc** -- Phase currents.
      :rtype: 3-tuple of floats



.. py:class:: SaturationModel(L_unsat=0.34, beta=0.84, S=7)

   This data class contains a saturation model based on a simple power
   function.



.. py:class:: MotorSaturated(R_s=3.7, R_R=2.5, L_sgm=0.023, L_M=SaturationModel(), p=2)

   Bases: :py:obj:`Motor`

   This subclass represents the Gamma model of a saturated induction motor.
   The Gamma model suits better for modeling the magnetic saturation.


   The default values correspond to the 2.2-kW induction motor.

   :param R_s: Stator resistance. The default is 3.7.
   :type R_s: float, optional
   :param R_R: Rotor resistance. The default is 2.1.
   :type R_R: float, optional
   :param L_sgm: Leakage inductance. The default is .021.
   :type L_sgm: float, optional
   :param L_M: Stator inductance function L_M(psi_s). The default is
               SaturationModel().
   :type L_M: function, optional
   :param p: Number of pole pairs. The default is 2.
   :type p: int, optional

   .. py:method:: currents(self, psi_ss, psi_Rs)

      This method overrides the base class method.




.. py:class:: Datalogger

   This class contains a datalogger.


   Initialize the attributes.


   .. py:method:: save(self, sol)

      Save the solution.

      :param sol: Solution from the solver.
      :type sol: bunch object


   .. py:method:: post_process(self, mdl)

      Transform the lists to the ndarray format and post-process them.




.. py:class:: DriveWithDiodeBridge(motor, mech, converter, delay, pwm, datalog)

   Bases: :py:obj:`Drive`

   This subclass models an induction motor drive, equipped with a three-phase
   diode bridge.


   Instantiate the classes.


   .. py:method:: get_initial_values(self)

      Extends the base class.



   .. py:method:: set_initial_values(self, t0, x0)

      Extends the base class.



   .. py:method:: f(self, t, x)

      Overrides the base class.




.. py:class:: DataloggerExtended

   Bases: :py:obj:`Datalogger`

   Extends the default data logger for the model with the DC-bus dynamics.


   Initialize the attributes.


   .. py:method:: save(self, sol)

      Extends the base class.



   .. py:method:: post_process(self, mdl)

      Extends the base class.





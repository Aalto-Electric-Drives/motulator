:py:mod:`model.interfaces`
==========================

.. py:module:: model.interfaces

.. autoapi-nested-parse::

   This module contains the interfaces for the solver.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   model.interfaces.PWM
   model.interfaces.Delay



Functions
~~~~~~~~~

.. autoapisummary::

   model.interfaces.solve



.. py:function:: solve(mdl, d_abc, t_span, max_step=np.inf)

   
   Solve the continuous-time model over t_span.

   :param mdl: Model to be simulated.
   :type mdl: object
   :param d_abc: Duty ratio references in the interval [0, 1].
   :type d_abc: array_like of floats, shape (3,)
   :param t_span: Interval of integration (t0, tf). The solver starts with t=t0 and
                  integrates until it reaches t=tf.
   :type t_span: 2-tuple of floats
   :param max_step: Max step size of the solver. The default is inf.
   :type max_step: float, optional















   ..
       !! processed by numpydoc !!

.. py:class:: PWM(enabled=True, N=2**12)

   Carrier comparison for pulse-width modulation.

   This implements carrier comparison for three-phase PWM. The switching
   instants and the switching states are explicitly and exactly computed from
   the duty ratios. The switching instants can be used in the solver.



   :param N: Amount of PWM quantization levels. The default is 2**12.
   :type N: int, optional
   :param enabled: PMW enabled. The default is True.
   :type enabled: Boolean, optional
















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(self, d_abc)

      
      Compute the normalized switching instants and the switching states.

      :param d_abc: Duty ratios in the range [0, 1].
      :type d_abc: array_like of floats, shape (3,)

      :returns: * **tn_sw** (*ndarray, shape (4,2)*) -- Normalized switching instants, tn_sw = [0, t1, t2, t3, 1].
                * **q** (*complex ndarray, shape (4,)*) -- Switching state space vectors corresponding to the switching
                  instants. For example, the switching state q[1] is applied
                  at the interval tn_sw[1].

      .. rubric:: Notes

      Switching instants t_sw split the sampling period T_s into
      four spans. No switching (e.g. da = 0 or da = 1) or simultaneous
      switching instants (e.g da == db) lead to zero spans, i.e.,
      t_sw[i] == t_sw[i].















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!


.. py:class:: Delay(length=1, elem=3)

   Computational delay.

   This models the compuational delay as a ring buffer.



   :param length: Length of the buffer in samples. The default is 1.
   :type length: int, optional
















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(self, u)

      
      :param u: Input array.
      :type u: array_like, shape (elem,)

      :returns: Output array.
      :rtype: array_like, shape (elem,)















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__(self)

      
      Return str(self).
















      ..
          !! processed by numpydoc !!



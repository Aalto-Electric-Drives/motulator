
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "drive_examples/obs_vhz/plot_obs_vhz_ctrl_syrm_7kw.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_drive_examples_obs_vhz_plot_obs_vhz_ctrl_syrm_7kw.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_drive_examples_obs_vhz_plot_obs_vhz_ctrl_syrm_7kw.py:


6.7-kW SyRM, saturated
======================

This example simulates observer-based V/Hz control of a saturated 6.7-kW
synchronous reluctance motor drive. The saturation is not taken into account in 
the control method (only in the system model).

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: Python


    import numpy as np
    from motulator.drive import model
    import motulator.drive.control.sm as control
    from motulator.drive.utils import (
        BaseValues, NominalValues, plot, Sequence, SynchronousMachinePars)








.. GENERATED FROM PYTHON SOURCE LINES 19-20

Compute base values based on the nominal values (just for figures).

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: Python


    nom = NominalValues(U=370, I=15.5, f=105.8, P=6.7e3, tau=20.1)
    base = BaseValues.from_nominal(nom, n_p=2)








.. GENERATED FROM PYTHON SOURCE LINES 25-34

A saturation model is created based on [#Hin2017]_, [#Awa2018]_. For
simplicity, the saturation model parameters are hard-coded in function below,
but the same model structure can also be used for other synchronous motors.
For PM motors, the magnetomotive force (MMF) of the PMs can be modeled using
constant current source `i_f` on the d-axis [#Awa2018]_, [#Jah1986]_.
Correspondingly, this approach assumes that the MMFs of the d-axis current
and of the PMs are in series. This model cannot capture the desaturation
phenomenon of thin iron ribs, see [#Arm2009]_ for details. For such motors,
look-up tables can be used.

.. GENERATED FROM PYTHON SOURCE LINES 34-76

.. code-block:: Python



    def i_s(psi_s):
        """
        Magnetic model for a 6.7-kW synchronous reluctance motor.

        Parameters
        ----------
        psi_s : complex
            Stator flux linkage (Vs).

        Returns
        -------
        complex
            Stator current (A).

        Notes
        -----
        For nonzero `i_f`, the initial value of the stator flux linkage `psi_s0` 
        needs to be solved, e.g., as follows::

        from scipy.optimize import minimize_scalar
        res = minimize_scalar(
            lambda psi_d: np.abs(
                        (a_d0 + a_dd*np.abs(psi_d)**S)*psi_d - i_f))
        psi_s0 = complex(res.x)

        """
        # Parameters
        a_d0, a_dd, S = 17.4, 373., 5  # d-axis self-saturation
        a_q0, a_qq, T = 52.1, 658., 1  # q-axis self-saturation
        a_dq, U, V = 1120., 1, 0  # Cross-saturation
        i_f = 0  # MMF of PMs
        # Inverse inductance functions
        G_d = a_d0 + a_dd*np.abs(psi_s.real)**S + (
            a_dq/(V + 2)*np.abs(psi_s.real)**U*np.abs(psi_s.imag)**(V + 2))
        G_q = a_q0 + a_qq*np.abs(psi_s.imag)**T + (
            a_dq/(U + 2)*np.abs(psi_s.real)**(U + 2)*np.abs(psi_s.imag)**V)
        # Stator current
        return G_d*psi_s.real - i_f + 1j*G_q*psi_s.imag









.. GENERATED FROM PYTHON SOURCE LINES 77-78

Configure the system model.

.. GENERATED FROM PYTHON SOURCE LINES 78-89

.. code-block:: Python


    mdl_par = SynchronousMachinePars(n_p=2, R_s=.54)
    machine = model.SynchronousMachine(mdl_par, i_s=i_s, psi_s0=0)
    # Magnetically linear SyRM model for comparison
    # mdl_par = SynchronousMachinePars(
    #     n_p=2, R_s=.54, L_d=37e-3, L_q=6.2e-3, psi_f=0)
    # machine = model.SynchronousMachine(mdl_par)
    mechanics = model.StiffMechanicalSystem(J=.015)
    converter = model.VoltageSourceConverter(u_dc=540)
    mdl = model.Drive(converter, machine, mechanics)








.. GENERATED FROM PYTHON SOURCE LINES 90-91

Configure the control system.

.. GENERATED FROM PYTHON SOURCE LINES 91-97

.. code-block:: Python


    par = SynchronousMachinePars(n_p=2, R_s=.54, L_d=37e-3, L_q=6.2e-3, psi_f=0)
    cfg = control.ObserverBasedVHzControlCfg(
        par, max_i_s=2*base.i, min_psi_s=base.psi, max_psi_s=base.psi)
    ctrl = control.ObserverBasedVHzControl(par, cfg)








.. GENERATED FROM PYTHON SOURCE LINES 98-99

Set the speed reference and the external load torque.

.. GENERATED FROM PYTHON SOURCE LINES 99-109

.. code-block:: Python


    # Speed reference
    times = np.array([0, .125, .25, .375, .5, .625, .75, .875, 1])*8
    values = np.array([0, 0, 1, 1, 0, -1, -1, 0, 0])*base.w
    ctrl.ref.w_m = Sequence(times, values)
    # External load torque
    times = np.array([0, .125, .125, .875, .875, 1])*8
    values = np.array([0, 0, 1, 1, 0, 0])*nom.tau
    mdl.mechanics.tau_L = Sequence(times, values)








.. GENERATED FROM PYTHON SOURCE LINES 110-111

Create the simulation object and simulate it.

.. GENERATED FROM PYTHON SOURCE LINES 111-115

.. code-block:: Python


    sim = model.Simulation(mdl, ctrl)
    sim.simulate(t_stop=8)








.. GENERATED FROM PYTHON SOURCE LINES 116-118

Plot results in per-unit values. By omitting the argument `base` you can plot
the results in SI units.

.. GENERATED FROM PYTHON SOURCE LINES 118-121

.. code-block:: Python


    plot(sim, base)




.. image-sg:: /drive_examples/obs_vhz/images/sphx_glr_plot_obs_vhz_ctrl_syrm_7kw_001.png
   :alt: plot obs vhz ctrl syrm 7kw
   :srcset: /drive_examples/obs_vhz/images/sphx_glr_plot_obs_vhz_ctrl_syrm_7kw_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 122-140

.. rubric:: References

.. [#Hin2017] Hinkkanen, Pescetto, Mölsä, Saarakkala, Pellegrino, Bojoi,
   “Sensorless self-commissioning of synchronous reluctance motors at
   standstill without rotor locking, ”IEEE Trans. Ind. Appl., 2017,
   https://doi.org/10.1109/TIA.2016.2644624

.. [#Awa2018] Awan, Song, Saarakkala, Hinkkanen, "Optimal torque control of
   saturated synchronous motors: plug-and-play method," IEEE Trans. Ind.
   Appl., 2018, https://doi.org/10.1109/TIA.2018.2862410

.. [#Jah1986] Jahns, Kliman, Neumann, “Interior permanent-magnet synchronous
   motors for adjustable-speed drives,” IEEE Trans. Ind. Appl., 1986,
   https://doi.org/10.1109/TIA.1986.4504786

.. [#Arm2009] Armando, Guglielmi, Pellegrino, Pastorelli, Vagati, "Accurate
   modeling and performance analysis of IPM-PMASR motors," IEEE Trans. Ind.
   Appl., 2009, https://doi.org/10.1109/TIA.2008.2009493


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 28.473 seconds)


.. _sphx_glr_download_drive_examples_obs_vhz_plot_obs_vhz_ctrl_syrm_7kw.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_obs_vhz_ctrl_syrm_7kw.ipynb <plot_obs_vhz_ctrl_syrm_7kw.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_obs_vhz_ctrl_syrm_7kw.py <plot_obs_vhz_ctrl_syrm_7kw.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_obs_vhz_ctrl_syrm_7kw.zip <plot_obs_vhz_ctrl_syrm_7kw.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

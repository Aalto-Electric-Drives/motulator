
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "drive_examples/obs_vhz/plot_obs_vhz_ctrl_pmsm_2kw_two_mass.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_drive_examples_obs_vhz_plot_obs_vhz_ctrl_pmsm_2kw_two_mass.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_drive_examples_obs_vhz_plot_obs_vhz_ctrl_pmsm_2kw_two_mass.py:


2.2-kW PMSM, 2-mass mechanics
=============================

This example simulates observer-based V/Hz control of a 2.2-kW PMSM drive. The
mechanical subsystem is modeled as a two-mass system. The resonance frequency
of the mechanics is around 85 Hz. The mechanical parameters correspond to 
[#Saa2015]_, except that the torsional damping is set to a smaller value in 
this example.

.. GENERATED FROM PYTHON SOURCE LINES 13-23

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt

    from motulator.drive import model
    import motulator.drive.control.sm as control
    from motulator.drive.utils import (
        BaseValues, NominalValues, plot, Sequence, SynchronousMachinePars,
        TwoMassMechanicalSystemPars)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Compute base values based on the nominal values (just for figures).

.. GENERATED FROM PYTHON SOURCE LINES 25-29

.. code-block:: Python


    nom = NominalValues(U=370, I=4.3, f=75, P=2.2e3, tau=14)
    base = BaseValues.from_nominal(nom, n_p=3)








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Configure the system model.

.. GENERATED FROM PYTHON SOURCE LINES 31-40

.. code-block:: Python


    mdl_par = SynchronousMachinePars(
        n_p=3, R_s=3.6, L_d=.036, L_q=.051, psi_f=.545)
    machine = model.SynchronousMachine(mdl_par)
    mdl_mec_par = TwoMassMechanicalSystemPars(J_M=.005, J_L=.005, K_S=700, C_S=.01)
    mechanics = model.TwoMassMechanicalSystem(mdl_mec_par)
    converter = model.VoltageSourceConverter(u_dc=540)
    mdl = model.Drive(converter, machine, mechanics)








.. GENERATED FROM PYTHON SOURCE LINES 41-42

Configure the control system.

.. GENERATED FROM PYTHON SOURCE LINES 42-48

.. code-block:: Python


    par = mdl_par  # Assume accurate machine model parameter estimates
    cfg = control.ObserverBasedVHzControlCfg(par, max_i_s=1.5*base.i)
    ctrl = control.ObserverBasedVHzControl(par, cfg, T_s=250e-6)
    #ctrl.rate_limiter = control.RateLimiter(2*np.pi*120)








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Set the speed reference and the external load torque.

.. GENERATED FROM PYTHON SOURCE LINES 50-60

.. code-block:: Python


    # Speed reference
    times = np.array([0, .1, .2, 1])
    values = np.array([0, 0, 1, 1])*base.w*.5
    ctrl.ref.w_m = Sequence(times, values)
    # External load torque
    times = np.array([0, .4, .4, 1])
    values = np.array([0, 0, 1, 1])*nom.tau
    mdl.mechanics.tau_L = Sequence(times, values)








.. GENERATED FROM PYTHON SOURCE LINES 61-62

Create the simulation object and simulate it.

.. GENERATED FROM PYTHON SOURCE LINES 62-68

.. code-block:: Python


    sim = model.Simulation(mdl, ctrl)
    sim.simulate(t_stop=1.2)
    # sphinx_gallery_thumbnail_number = 3
    plot(sim, base)  # Plot results in per-unit values




.. image-sg:: /drive_examples/obs_vhz/images/sphx_glr_plot_obs_vhz_ctrl_pmsm_2kw_two_mass_001.png
   :alt: plot obs vhz ctrl pmsm 2kw two mass
   :srcset: /drive_examples/obs_vhz/images/sphx_glr_plot_obs_vhz_ctrl_pmsm_2kw_two_mass_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-70

Plot the load speed and the twist angle.

.. GENERATED FROM PYTHON SOURCE LINES 70-91

.. code-block:: Python


    t_span = (0, 1.2)
    _, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 5))
    ax1.plot(
        sim.mdl.mechanics.data.t,
        sim.mdl.mechanics.data.w_M,
        label=r"$\omega_\mathrm{M}$")
    ax1.plot(
        sim.mdl.mechanics.data.t,
        sim.mdl.mechanics.data.w_L,
        label=r"$\omega_\mathrm{L}$")
    ax2.plot(sim.mdl.mechanics.data.t, sim.mdl.mechanics.data.theta_ML*180/np.pi)
    ax1.set_xlim(t_span)
    ax2.set_xlim(t_span)
    ax1.set_xticklabels([])
    ax1.legend()
    ax1.set_ylabel(r"$\omega_\mathrm{M}$, $\omega_\mathrm{L}$ (rad/s)")
    ax2.set_ylabel(r"$\vartheta_\mathrm{ML}$ (deg)")
    ax2.set_xlabel("Time (s)")
    plt.show()




.. image-sg:: /drive_examples/obs_vhz/images/sphx_glr_plot_obs_vhz_ctrl_pmsm_2kw_two_mass_002.png
   :alt: plot obs vhz ctrl pmsm 2kw two mass
   :srcset: /drive_examples/obs_vhz/images/sphx_glr_plot_obs_vhz_ctrl_pmsm_2kw_two_mass_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 92-94

Plot also the frequency response from the electromagnetic torque tau_M to the
rotor speed w_M.

.. GENERATED FROM PYTHON SOURCE LINES 94-123

.. code-block:: Python


    # Frequency range and number of points
    f_span = (5, 500)
    num = 200
    # Parameters
    J_M, J_L = mdl_mec_par.J_M, mdl_mec_par.J_L
    K_S, C_S = mdl_mec_par.K_S, mdl_mec_par.C_S
    # Frequencies
    w = 2*np.pi*np.logspace(np.log10(f_span[0]), np.log10(f_span[-1]), num=num)
    s = 1j*w
    # Frequency response
    B = J_L*s**2 + C_S*s + K_S
    A = s*(J_M*J_L*s**2 + (J_M + J_L)*C_S*s + (J_M + J_L)*K_S)
    G = B/A
    # Plot figure
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 5))
    ax1.loglog(w/(2*np.pi), np.abs(G))
    ax1.set_xticklabels([])
    ax2.semilogx(w/(2*np.pi), np.angle(G)*180/np.pi)
    ax1.set_xlim(f_span)
    ax2.set_xlim(f_span)
    ax2.set_ylim([-100, 100])
    ax2.set_yticks([-90, -45, 0, 45, 90])
    ax1.set_ylabel(r"Amplitude (rad/(s$\cdot$Nm))")
    ax2.set_ylabel("Phase (deg)")
    ax2.set_xlabel("Frequency (Hz)")
    fig.align_ylabels()
    plt.show()




.. image-sg:: /drive_examples/obs_vhz/images/sphx_glr_plot_obs_vhz_ctrl_pmsm_2kw_two_mass_003.png
   :alt: plot obs vhz ctrl pmsm 2kw two mass
   :srcset: /drive_examples/obs_vhz/images/sphx_glr_plot_obs_vhz_ctrl_pmsm_2kw_two_mass_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 124-129

.. rubric:: References

.. [#Saa2015] Saarakkala, Hinkkanen, "Identification of two-mass mechanical
   systems using torque excitation: Design and experimental evaluation," IEEE
   Trans. Ind. Appl., 2015, https://doi.org/10.1109/TIA.2015.2416128


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.818 seconds)


.. _sphx_glr_download_drive_examples_obs_vhz_plot_obs_vhz_ctrl_pmsm_2kw_two_mass.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_obs_vhz_ctrl_pmsm_2kw_two_mass.ipynb <plot_obs_vhz_ctrl_pmsm_2kw_two_mass.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_obs_vhz_ctrl_pmsm_2kw_two_mass.py <plot_obs_vhz_ctrl_pmsm_2kw_two_mass.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_obs_vhz_ctrl_pmsm_2kw_two_mass.zip <plot_obs_vhz_ctrl_pmsm_2kw_two_mass.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "drive_examples/signal_inj/plot_7kw_syrm_signal_inj.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_drive_examples_signal_inj_plot_7kw_syrm_signal_inj.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_drive_examples_signal_inj_plot_7kw_syrm_signal_inj.py:


6.7-kW saturated SyRM, signal injection
=======================================

This example simulates sensorless vector control of a saturated 6.7-kW synchronous
reluctance machine (SyRM). Square-wave signal injection with a simple phase-locked loop
is used. Cross-saturation errors are compensated for using flux maps. Square-wave
signal injection with a simple phase-locked loop is used.

.. GENERATED FROM PYTHON SOURCE LINES 13-19

.. code-block:: Python

    import matplotlib.pyplot as plt
    import numpy as np

    import motulator.drive.control.sm as control
    from motulator.drive import model, utils








.. GENERATED FROM PYTHON SOURCE LINES 20-21

Compute base values based on the nominal values.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: Python


    nom = utils.NominalValues(U=370, I=15.5, f=105.8, P=6.7e3, tau=20.1)
    base = utils.BaseValues.from_nominal(nom, n_p=2)








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Configure the system model.

.. GENERATED FROM PYTHON SOURCE LINES 27-40

.. code-block:: Python


    # Use analytical saturation model
    curr_map = utils.SaturationModelSyRM(
        a_d0=17.4, a_dd=373, S=5, a_q0=52.1, a_qq=658, T=1, a_dq=1120, U=1, V=0
    )
    par = model.SaturatedSynchronousMachinePars(
        n_p=2, R_s=0.54, i_s_dq_fcn=curr_map, kind="rel"
    )
    machine = model.SynchronousMachine(par)
    mechanics = model.MechanicalSystem(J=0.015)
    converter = model.VoltageSourceConverter(u_dc=540)
    mdl = model.Drive(machine, mechanics, converter)








.. GENERATED FROM PYTHON SOURCE LINES 41-42

Configure the control system.

.. GENERATED FROM PYTHON SOURCE LINES 42-58

.. code-block:: Python


    # Compute rectilinear current and flux maps
    psi_d_range = np.linspace(-1.5 * base.psi, 1.5 * base.psi, 32)
    psi_q_range = np.linspace(-0.5 * base.psi, 0.5 * base.psi, 32)
    curr_map = curr_map.as_magnetic_model(psi_d_range, psi_q_range)
    flux_map = curr_map.invert()

    # Parameter estimates, stator resistance not needed
    est_par = model.SaturatedSynchronousMachinePars(
        n_p=2, R_s=0, i_s_dq_fcn=curr_map, psi_s_dq_fcn=flux_map, kind="rel"
    )
    cfg = control.CurrentVectorControllerCfg(i_s_max=2 * base.i, psi_s_min=0.5 * base.psi)
    vector_ctrl = control.SignalInjectionController(est_par, cfg)
    speed_ctrl = control.SpeedController(J=0.015, alpha_s=2 * np.pi * 4)
    ctrl = control.VectorControlSystem(vector_ctrl, speed_ctrl)








.. GENERATED FROM PYTHON SOURCE LINES 59-60

Set the speed reference and the external load torque.

.. GENERATED FROM PYTHON SOURCE LINES 60-70

.. code-block:: Python


    t_stop = 4
    times = np.array([0, 0.25, 0.25, 0.375, 0.5, 0.625, 0.75, 0.75, 1]) * t_stop
    values = np.array([0, 0, 1, 1, 0, -1, -1, 0, 0]) * 0.1 * base.w_M
    ctrl.set_speed_ref(utils.SequenceGenerator(times, values))

    times = np.array([0, 0.125, 0.125, 0.875, 0.875, 1]) * t_stop
    values = np.array([0, 0, 1, 1, 0, 0]) * nom.tau
    mdl.mechanics.set_external_load_torque(utils.SequenceGenerator(times, values))








.. GENERATED FROM PYTHON SOURCE LINES 71-72

Create the simulation object, simulate, and plot the results in per-unit values.

.. GENERATED FROM PYTHON SOURCE LINES 72-77

.. code-block:: Python


    sim = model.Simulation(mdl, ctrl)
    res = sim.simulate(t_stop)
    utils.plot(res, base)




.. image-sg:: /drive_examples/signal_inj/images/sphx_glr_plot_7kw_syrm_signal_inj_001.png
   :alt: plot 7kw syrm signal inj
   :srcset: /drive_examples/signal_inj/images/sphx_glr_plot_7kw_syrm_signal_inj_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-79

Plot also the angles.

.. GENERATED FROM PYTHON SOURCE LINES 79-93

.. code-block:: Python


    plt.figure()
    plt.plot(res.mdl.t, res.mdl.machine.theta_m, label=r"$\vartheta_\mathrm{m}$")
    plt.plot(
        res.ctrl.t,
        res.ctrl.fbk.theta_m,
        ds="steps-post",
        label=r"$\hat \vartheta_\mathrm{m}$",
    )
    plt.legend()
    plt.xlim(0, 4)
    plt.xlabel("Time (s)")
    plt.ylabel("Electrical angle (rad)")
    plt.show()



.. image-sg:: /drive_examples/signal_inj/images/sphx_glr_plot_7kw_syrm_signal_inj_002.png
   :alt: plot 7kw syrm signal inj
   :srcset: /drive_examples/signal_inj/images/sphx_glr_plot_7kw_syrm_signal_inj_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 33.902 seconds)


.. _sphx_glr_download_drive_examples_signal_inj_plot_7kw_syrm_signal_inj.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_7kw_syrm_signal_inj.ipynb <plot_7kw_syrm_signal_inj.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_7kw_syrm_signal_inj.py <plot_7kw_syrm_signal_inj.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_7kw_syrm_signal_inj.zip <plot_7kw_syrm_signal_inj.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/vector/plot_vector_ctrl_im_2kw.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_vector_plot_vector_ctrl_im_2kw.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_vector_plot_vector_ctrl_im_2kw.py:


2.2-kW induction motor, saturated
=================================

This example simulates sensorless current-vector control of a 2.2-kW induction 
motor drive. The magnetic saturation of the machine is also included in the 
system model, while the control system assumes constant parameters. 

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: Python


    from motulator.drive import model
    import motulator.drive.control.im as control
    from motulator.drive.utils import (
        BaseValues, NominalValues, plot, InductionMachinePars,
        InductionMachineInvGammaPars)








.. GENERATED FROM PYTHON SOURCE LINES 19-20

Compute base values based on the nominal values (just for figures).

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: Python


    nom = NominalValues(U=400, I=5, f=50, P=2.2e3, tau=14.6)
    base = BaseValues.from_nominal(nom, n_p=2)








.. GENERATED FROM PYTHON SOURCE LINES 25-27

The main-flux saturation in the system model is modeled based on [#Qu2012]_.
The default parameters correspond to the measured data of a 2.2-kW machine.

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: Python



    def L_s(psi, L_su=.34, beta=.84, S=7):
        """Stator inductance saturation model."""
        return L_su/(1 + (beta*psi)**S)









.. GENERATED FROM PYTHON SOURCE LINES 35-36

Configure the system model.

.. GENERATED FROM PYTHON SOURCE LINES 36-50

.. code-block:: Python


    # Γ-equivalent machine model with main-flux saturation included
    mdl_par = InductionMachinePars(n_p=2, R_s=3.7, R_r=2.5, L_ell=.023, L_s=L_s)
    # Unsaturated machine model, using its inverse-Γ parameters (uncomment to try)
    # par = InductionMachineInvGammaPars(
    #     n_p=2, R_s=3.7, R_R=2.1, L_sgm=.021, L_M=.224)
    # mdl_par = InductionMachinePars.from_inv_gamma_model_pars(par)
    machine = model.InductionMachine(mdl_par)
    mechanics = model.StiffMechanicalSystem(J=.015)
    converter = model.VoltageSourceConverter(u_dc=540)
    mdl = model.Drive(converter, machine, mechanics)
    # mdl.pwm = model.CarrierComparison()  # Try to enable the PWM model
    # mdl.delay = model.Delay(2)  # Try longer computational delay








.. GENERATED FROM PYTHON SOURCE LINES 51-52

Configure the control system.

.. GENERATED FROM PYTHON SOURCE LINES 52-67

.. code-block:: Python


    # Machine model parameter estimates
    par = InductionMachineInvGammaPars(
        n_p=2, R_s=3.7, R_R=2.1, L_sgm=.021, L_M=.224)
    # Set nominal values and limits for reference generation
    cfg = control.CurrentReferenceCfg(
        par, max_i_s=1.5*base.i, nom_u_s=base.u, nom_w_s=base.w)
    # Create the control system
    ctrl = control.CurrentVectorControl(
        par, cfg, J=.015, T_s=250e-6, sensorless=True)
    # As an example, you may replace the default 2DOF PI speed controller with the
    # regular PI speed controller by uncommenting the following line
    # from motulator.common.control import PIController
    # ctrl.speed_ctrl = PIController(k_p=1, k_i=1)








.. GENERATED FROM PYTHON SOURCE LINES 68-70

Set the speed reference and the external load torque. You may also try to
uncomment the field-weakening sequence.

.. GENERATED FROM PYTHON SOURCE LINES 70-79

.. code-block:: Python


    # Simple acceleration and load torque step
    ctrl.ref.w_m = lambda t: (t > .2)*(.5*base.w)
    mdl.mechanics.tau_L = lambda t: (t > .75)*nom.tau

    # No load, field-weakening (uncomment to try)
    # ctrl.ref.w_m = lambda t: (t > .2)*(2*base.w)
    # mdl.mechanics.tau_L = lambda t: 0








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Create the simulation object and simulate it.

.. GENERATED FROM PYTHON SOURCE LINES 81-85

.. code-block:: Python


    sim = model.Simulation(mdl, ctrl)
    sim.simulate(t_stop=1.5)








.. GENERATED FROM PYTHON SOURCE LINES 86-88

Plot results in per-unit values. By omitting the argument `base` you can plot
the results in SI units.

.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: Python


    plot(sim, base)




.. image-sg:: /auto_examples/vector/images/sphx_glr_plot_vector_ctrl_im_2kw_001.png
   :alt: plot vector ctrl im 2kw
   :srcset: /auto_examples/vector/images/sphx_glr_plot_vector_ctrl_im_2kw_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 92-97

.. rubric:: References

.. [#Qu2012] Qu, Ranta, Hinkkanen, Luomi, "Loss-minimizing flux level control
   of induction motor drives," IEEE Trans. Ind. Appl., 2012,
   https://doi.org/10.1109/TIA.2012.2190818


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.049 seconds)


.. _sphx_glr_download_auto_examples_vector_plot_vector_ctrl_im_2kw.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_vector_ctrl_im_2kw.ipynb <plot_vector_ctrl_im_2kw.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_vector_ctrl_im_2kw.py <plot_vector_ctrl_im_2kw.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_vector_ctrl_im_2kw.zip <plot_vector_ctrl_im_2kw.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

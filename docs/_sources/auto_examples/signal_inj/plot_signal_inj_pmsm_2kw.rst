
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/signal_inj/plot_signal_inj_pmsm_2kw.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_signal_inj_plot_signal_inj_pmsm_2kw.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_signal_inj_plot_signal_inj_pmsm_2kw.py:


2.2-kW PMSM
===========

This example simulates sensorless vector control of a 2.2-kW PMSM drive.
Square-wave signal injection is used with a simple phase-locked loop.

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt
    from motulator import model, control
    from motulator import BaseValues, NominalValues, Sequence, plot








.. GENERATED FROM PYTHON SOURCE LINES 17-18

Compute base values based on the nominal values (just for figures).

.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: Python


    nom = NominalValues(U=370, I=4.3, f=75, P=2.2e3, tau=14)
    base = BaseValues.from_nominal(nom, n_p=3)








.. GENERATED FROM PYTHON SOURCE LINES 23-24

Configure the system model.

.. GENERATED FROM PYTHON SOURCE LINES 24-31

.. code-block:: Python


    machine = model.SynchronousMachine(
        n_p=3, R_s=3.6, L_d=.036, L_q=.051, psi_f=.545)
    mechanics = model.Mechanics(J=.015)
    converter = model.Inverter(u_dc=540)
    mdl = model.Drive(converter, machine, mechanics)








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Configure the control system.

.. GENERATED FROM PYTHON SOURCE LINES 33-40

.. code-block:: Python


    par = control.sm.ModelPars(
        n_p=3, R_s=3.6, L_d=.036, L_q=.051, psi_f=.545, J=.015)
    cfg = control.sm.CurrentReferenceCfg(par, nom_w_m=base.w, max_i_s=2*base.i)
    ctrl = control.sm.SignalInjectionCtrl(par, cfg, T_s=250e-6)
    # ctrl.current_ctrl = control.sm.CurrentCtrl(par, 2*np.pi*100)








.. GENERATED FROM PYTHON SOURCE LINES 41-42

Set the speed reference and the external load torque.

.. GENERATED FROM PYTHON SOURCE LINES 42-52

.. code-block:: Python


    # Speed reference
    times = np.array([0, .25, .25, .375, .5, .625, .75, .75, 1])*4
    values = np.array([0, 0, 1, 1, 0, -1, -1, 0, 0])*base.w*.1
    ctrl.ref.w_m = Sequence(times, values)
    # External load torque
    times = np.array([0, .125, .125, .875, .875, 1])*4
    values = np.array([0, 0, 1, 1, 0, 0])*nom.tau
    mdl.mechanics.tau_L_t = Sequence(times, values)








.. GENERATED FROM PYTHON SOURCE LINES 53-54

Create the simulation object and simulate it.

.. GENERATED FROM PYTHON SOURCE LINES 54-58

.. code-block:: Python


    sim = model.Simulation(mdl, ctrl)
    sim.simulate(t_stop=4)








.. GENERATED FROM PYTHON SOURCE LINES 59-60

Plot results in per-unit values.

.. GENERATED FROM PYTHON SOURCE LINES 60-81

.. code-block:: Python


    # Plot the "basic" figure
    plot(sim, base)

    # Plot also the angles
    mdl = sim.mdl  # Continuous-time data
    ctrl = sim.ctrl.data  # Discrete-time data
    ctrl.t = ctrl.ref.t  # Discrete time

    plt.figure()
    plt.plot(mdl.data.t, mdl.machine.data.theta_m, label=r"$\vartheta_\mathrm{m}$")
    plt.plot(
        ctrl.t,
        ctrl.fbk.theta_m,
        ds="steps-post",
        label=r"$\hat \vartheta_\mathrm{m}$")
    plt.legend()
    plt.xlim(0, 4)
    plt.xlabel("Time (s)")
    plt.ylabel("Electrical angle (rad)")
    plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/signal_inj/images/sphx_glr_plot_signal_inj_pmsm_2kw_001.png
         :alt: plot signal inj pmsm 2kw
         :srcset: /auto_examples/signal_inj/images/sphx_glr_plot_signal_inj_pmsm_2kw_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/signal_inj/images/sphx_glr_plot_signal_inj_pmsm_2kw_002.png
         :alt: plot signal inj pmsm 2kw
         :srcset: /auto_examples/signal_inj/images/sphx_glr_plot_signal_inj_pmsm_2kw_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 13.400 seconds)


.. _sphx_glr_download_auto_examples_signal_inj_plot_signal_inj_pmsm_2kw.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_signal_inj_pmsm_2kw.ipynb <plot_signal_inj_pmsm_2kw.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_signal_inj_pmsm_2kw.py <plot_signal_inj_pmsm_2kw.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

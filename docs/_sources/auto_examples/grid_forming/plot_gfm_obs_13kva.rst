
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/grid_forming/plot_gfm_obs_13kva.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_grid_forming_plot_gfm_obs_13kva.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_grid_forming_plot_gfm_obs_13kva.py:


12.5-kVA converter, disturbance observer
========================================
    
This example simulates a converter using disturbance-observer-based control in
grid-forming mode. The converter output voltage and the active power are 
directly controlled, and grid synchronization is provided by the disturbance 
observer. A transparent current controller is included for current limitation.

.. GENERATED FROM PYTHON SOURCE LINES 13-20

.. code-block:: Python

    from motulator.common.model import VoltageSourceConverter, Simulation
    from motulator.common.utils import BaseValues, NominalValues
    from motulator.grid import model
    import motulator.grid.control.grid_forming as control
    from motulator.grid.utils import FilterPars, GridPars, plot
    # from motulator.common.model import CarrierComparison








.. GENERATED FROM PYTHON SOURCE LINES 21-22

Compute base values based on the nominal values.

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: Python


    nom = NominalValues(U=400, I=18, f=50, P=12.5e3)
    base = BaseValues.from_nominal(nom)








.. GENERATED FROM PYTHON SOURCE LINES 27-28

Configure the system model.

.. GENERATED FROM PYTHON SOURCE LINES 28-49

.. code-block:: Python


    # Grid parameters
    grid_par = GridPars(u_gN=base.u, w_gN=base.w, L_g=.74*base.L)
    # Uncomment the line below to simulate a strong grid
    # grid_par.L_g = 0

    # Filter parameters
    filter_par = FilterPars(L_fc=.15*base.L, R_fc=.05*base.Z)

    # Create AC filter with given parameters
    ac_filter = model.ACFilter(filter_par, grid_par)

    # Grid voltage source with constant frequency and voltage magnitude
    grid_model = model.ThreePhaseVoltageSource(w_g=base.w, abs_e_g=base.u)

    # Inverter with constant DC voltage
    converter = VoltageSourceConverter(u_dc=650)

    # Create system model
    mdl = model.GridConverterSystem(converter, ac_filter, grid_model)








.. GENERATED FROM PYTHON SOURCE LINES 50-51

Configure the control system.

.. GENERATED FROM PYTHON SOURCE LINES 51-62

.. code-block:: Python


    # Estimates for the grid parameters, grid inductance estimate is left at 0
    grid_par_est = GridPars(u_gN=base.u, w_gN=base.w, L_g=.2*base.L)

    # Set the configuration parameters
    cfg = control.ObserverBasedGFMControlCfg(
        grid_par_est, filter_par, max_i=1.3*base.i, T_s=100e-6, R_a=.2*base.Z)

    # Create the control system
    ctrl = control.ObserverBasedGFMControl(cfg)








.. GENERATED FROM PYTHON SOURCE LINES 63-64

Set the references for converter output voltage magnitude and active power.

.. GENERATED FROM PYTHON SOURCE LINES 64-79

.. code-block:: Python


    # Converter output voltage magnitude reference
    ctrl.ref.v_c = lambda t: base.u

    # Active power reference
    ctrl.ref.p_g = lambda t: ((t > .2)/3 + (t > .5)/3 + (t > .8)/3 -
                              (t > 1.2))*nom.P

    # Uncomment line below to simulate operation in rectifier mode
    # ctrl.ref.p_g = lambda t: ((t > .2) - (t > .7)*2 + (t > 1.2))*nom.P

    # Uncomment lines below to simulate a grid voltage sag with constant ref.p_g
    # mdl.grid_model.par.abs_e_g = lambda t: (1 - (t > .2)*.8 + (t > 1)*.8)*base.u
    # ctrl.ref.p_g = lambda t: nom.P








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Create the simulation object and simulate it.

.. GENERATED FROM PYTHON SOURCE LINES 81-85

.. code-block:: Python


    sim = Simulation(mdl, ctrl)
    sim.simulate(t_stop=1.5)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

Plot the results.

.. GENERATED FROM PYTHON SOURCE LINES 87-89

.. code-block:: Python


    plot(sim, base)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/grid_forming/images/sphx_glr_plot_gfm_obs_13kva_001.png
         :alt: plot gfm obs 13kva
         :srcset: /auto_examples/grid_forming/images/sphx_glr_plot_gfm_obs_13kva_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/grid_forming/images/sphx_glr_plot_gfm_obs_13kva_002.png
         :alt: plot gfm obs 13kva
         :srcset: /auto_examples/grid_forming/images/sphx_glr_plot_gfm_obs_13kva_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 8.454 seconds)


.. _sphx_glr_download_auto_examples_grid_forming_plot_gfm_obs_13kva.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_gfm_obs_13kva.ipynb <plot_gfm_obs_13kva.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_gfm_obs_13kva.py <plot_gfm_obs_13kva.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_gfm_obs_13kva.zip <plot_gfm_obs_13kva.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
